package org.charles.angels.houses.http.models.forms

import org.http4s.EntityDecoder
import cats.syntax.all.*
import cats.effect.kernel.Concurrent
import cats.Parallel
import cats.data.EitherT
import org.http4s.DecodeResult
import fs2.Stream
import cats.Monad
import fs2.RaiseThrowable

final case class PersonalInformationForm(
    ci: Int,
    name: String,
    lastname: String,
    familyGroup: String,
    age: Int
)

final case class AttireForm(
    shortOrTrousersSize: Int,
    tshirtOrshirtSize: Int,
    sweaterSize: Option[Int],
    dressSize: Option[Int],
    footwearSize: Int
)

final case class ChildForm[F[_]](
    photoContents: fs2.Stream[F, Byte],
    filename: String,
    sex: String,
    pInfo: PersonalInformationForm,
    fInfo: Option[PersonalInformationForm],
    mInfo: Option[PersonalInformationForm],
    npInfo: Option[PersonalInformationForm],
    rBen: List[PersonalInformationForm],
    attire: AttireForm
)

given [F[_]: Monad: RaiseThrowable: Concurrent]
    : PartField[F, PersonalInformationForm] = (
  PartField.field[F, Int]("ci"),
  PartField.field[F, String]("name"),
  PartField.field[F, String]("lastname"),
  PartField.field[F, String]("familyName"),
  PartField.field[F, Int]("age")
).mapN(PersonalInformationForm.apply)

given [F[_]: Concurrent: Parallel]: EntityDecoder[F, ChildForm[F]] =
  EntityDecoder.multipart.map { m =>
    (
      m.parts.field[String]("sex"),
      m.parts.field[PersonalInformationForm]("personalInformation"),
      m.parts.field[Option[PersonalInformationForm]]("fatherInformation"),
      m.parts.field[Option[PersonalInformationForm]]("motherInformation"),
      m.parts.field[Option[PersonalInformationForm]]("nonParentInformation"),
      m.parts.field[Vector[PersonalInformationForm]]("relatedBeneficiaries")
    )
  }
